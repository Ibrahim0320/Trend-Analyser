
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ResearchRun
 * 
 */
export type ResearchRun = $Result.DefaultSelection<Prisma.$ResearchRunPayload>
/**
 * Model Watchlist
 * 
 */
export type Watchlist = $Result.DefaultSelection<Prisma.$WatchlistPayload>
/**
 * Model ThemeWeekly
 * 
 */
export type ThemeWeekly = $Result.DefaultSelection<Prisma.$ThemeWeeklyPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ResearchRuns
 * const researchRuns = await prisma.researchRun.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ResearchRuns
   * const researchRuns = await prisma.researchRun.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.researchRun`: Exposes CRUD operations for the **ResearchRun** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResearchRuns
    * const researchRuns = await prisma.researchRun.findMany()
    * ```
    */
  get researchRun(): Prisma.ResearchRunDelegate<ExtArgs>;

  /**
   * `prisma.watchlist`: Exposes CRUD operations for the **Watchlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Watchlists
    * const watchlists = await prisma.watchlist.findMany()
    * ```
    */
  get watchlist(): Prisma.WatchlistDelegate<ExtArgs>;

  /**
   * `prisma.themeWeekly`: Exposes CRUD operations for the **ThemeWeekly** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ThemeWeeklies
    * const themeWeeklies = await prisma.themeWeekly.findMany()
    * ```
    */
  get themeWeekly(): Prisma.ThemeWeeklyDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ResearchRun: 'ResearchRun',
    Watchlist: 'Watchlist',
    ThemeWeekly: 'ThemeWeekly'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "researchRun" | "watchlist" | "themeWeekly"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ResearchRun: {
        payload: Prisma.$ResearchRunPayload<ExtArgs>
        fields: Prisma.ResearchRunFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResearchRunFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResearchRunFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          findFirst: {
            args: Prisma.ResearchRunFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResearchRunFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          findMany: {
            args: Prisma.ResearchRunFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>[]
          }
          create: {
            args: Prisma.ResearchRunCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          createMany: {
            args: Prisma.ResearchRunCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResearchRunCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>[]
          }
          delete: {
            args: Prisma.ResearchRunDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          update: {
            args: Prisma.ResearchRunUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          deleteMany: {
            args: Prisma.ResearchRunDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResearchRunUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResearchRunUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchRunPayload>
          }
          aggregate: {
            args: Prisma.ResearchRunAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResearchRun>
          }
          groupBy: {
            args: Prisma.ResearchRunGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResearchRunGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResearchRunCountArgs<ExtArgs>
            result: $Utils.Optional<ResearchRunCountAggregateOutputType> | number
          }
        }
      }
      Watchlist: {
        payload: Prisma.$WatchlistPayload<ExtArgs>
        fields: Prisma.WatchlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findFirst: {
            args: Prisma.WatchlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findMany: {
            args: Prisma.WatchlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          create: {
            args: Prisma.WatchlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          createMany: {
            args: Prisma.WatchlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchlistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          delete: {
            args: Prisma.WatchlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          update: {
            args: Prisma.WatchlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          deleteMany: {
            args: Prisma.WatchlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WatchlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          aggregate: {
            args: Prisma.WatchlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchlist>
          }
          groupBy: {
            args: Prisma.WatchlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchlistGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchlistCountArgs<ExtArgs>
            result: $Utils.Optional<WatchlistCountAggregateOutputType> | number
          }
        }
      }
      ThemeWeekly: {
        payload: Prisma.$ThemeWeeklyPayload<ExtArgs>
        fields: Prisma.ThemeWeeklyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeWeeklyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeWeeklyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          findFirst: {
            args: Prisma.ThemeWeeklyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeWeeklyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          findMany: {
            args: Prisma.ThemeWeeklyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>[]
          }
          create: {
            args: Prisma.ThemeWeeklyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          createMany: {
            args: Prisma.ThemeWeeklyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeWeeklyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>[]
          }
          delete: {
            args: Prisma.ThemeWeeklyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          update: {
            args: Prisma.ThemeWeeklyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          deleteMany: {
            args: Prisma.ThemeWeeklyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeWeeklyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ThemeWeeklyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemeWeeklyPayload>
          }
          aggregate: {
            args: Prisma.ThemeWeeklyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateThemeWeekly>
          }
          groupBy: {
            args: Prisma.ThemeWeeklyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeWeeklyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeWeeklyCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeWeeklyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model ResearchRun
   */

  export type AggregateResearchRun = {
    _count: ResearchRunCountAggregateOutputType | null
    _min: ResearchRunMinAggregateOutputType | null
    _max: ResearchRunMaxAggregateOutputType | null
  }

  export type ResearchRunMinAggregateOutputType = {
    id: string | null
    region: string | null
    created_at: Date | null
    why_matters: string | null
  }

  export type ResearchRunMaxAggregateOutputType = {
    id: string | null
    region: string | null
    created_at: Date | null
    why_matters: string | null
  }

  export type ResearchRunCountAggregateOutputType = {
    id: number
    region: number
    created_at: number
    keywords_json: number
    source_counts: number
    rising_json: number
    leaders_json: number
    citations_json: number
    why_matters: number
    ahead_json: number
    _all: number
  }


  export type ResearchRunMinAggregateInputType = {
    id?: true
    region?: true
    created_at?: true
    why_matters?: true
  }

  export type ResearchRunMaxAggregateInputType = {
    id?: true
    region?: true
    created_at?: true
    why_matters?: true
  }

  export type ResearchRunCountAggregateInputType = {
    id?: true
    region?: true
    created_at?: true
    keywords_json?: true
    source_counts?: true
    rising_json?: true
    leaders_json?: true
    citations_json?: true
    why_matters?: true
    ahead_json?: true
    _all?: true
  }

  export type ResearchRunAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResearchRun to aggregate.
     */
    where?: ResearchRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearchRuns to fetch.
     */
    orderBy?: ResearchRunOrderByWithRelationInput | ResearchRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResearchRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearchRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearchRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResearchRuns
    **/
    _count?: true | ResearchRunCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResearchRunMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResearchRunMaxAggregateInputType
  }

  export type GetResearchRunAggregateType<T extends ResearchRunAggregateArgs> = {
        [P in keyof T & keyof AggregateResearchRun]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResearchRun[P]>
      : GetScalarType<T[P], AggregateResearchRun[P]>
  }




  export type ResearchRunGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchRunWhereInput
    orderBy?: ResearchRunOrderByWithAggregationInput | ResearchRunOrderByWithAggregationInput[]
    by: ResearchRunScalarFieldEnum[] | ResearchRunScalarFieldEnum
    having?: ResearchRunScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResearchRunCountAggregateInputType | true
    _min?: ResearchRunMinAggregateInputType
    _max?: ResearchRunMaxAggregateInputType
  }

  export type ResearchRunGroupByOutputType = {
    id: string
    region: string
    created_at: Date
    keywords_json: JsonValue
    source_counts: JsonValue | null
    rising_json: JsonValue | null
    leaders_json: JsonValue | null
    citations_json: JsonValue | null
    why_matters: string | null
    ahead_json: JsonValue | null
    _count: ResearchRunCountAggregateOutputType | null
    _min: ResearchRunMinAggregateOutputType | null
    _max: ResearchRunMaxAggregateOutputType | null
  }

  type GetResearchRunGroupByPayload<T extends ResearchRunGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResearchRunGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResearchRunGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResearchRunGroupByOutputType[P]>
            : GetScalarType<T[P], ResearchRunGroupByOutputType[P]>
        }
      >
    >


  export type ResearchRunSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    created_at?: boolean
    keywords_json?: boolean
    source_counts?: boolean
    rising_json?: boolean
    leaders_json?: boolean
    citations_json?: boolean
    why_matters?: boolean
    ahead_json?: boolean
  }, ExtArgs["result"]["researchRun"]>

  export type ResearchRunSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    created_at?: boolean
    keywords_json?: boolean
    source_counts?: boolean
    rising_json?: boolean
    leaders_json?: boolean
    citations_json?: boolean
    why_matters?: boolean
    ahead_json?: boolean
  }, ExtArgs["result"]["researchRun"]>

  export type ResearchRunSelectScalar = {
    id?: boolean
    region?: boolean
    created_at?: boolean
    keywords_json?: boolean
    source_counts?: boolean
    rising_json?: boolean
    leaders_json?: boolean
    citations_json?: boolean
    why_matters?: boolean
    ahead_json?: boolean
  }


  export type $ResearchRunPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResearchRun"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      region: string
      created_at: Date
      keywords_json: Prisma.JsonValue
      source_counts: Prisma.JsonValue | null
      rising_json: Prisma.JsonValue | null
      leaders_json: Prisma.JsonValue | null
      citations_json: Prisma.JsonValue | null
      why_matters: string | null
      ahead_json: Prisma.JsonValue | null
    }, ExtArgs["result"]["researchRun"]>
    composites: {}
  }

  type ResearchRunGetPayload<S extends boolean | null | undefined | ResearchRunDefaultArgs> = $Result.GetResult<Prisma.$ResearchRunPayload, S>

  type ResearchRunCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResearchRunFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResearchRunCountAggregateInputType | true
    }

  export interface ResearchRunDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResearchRun'], meta: { name: 'ResearchRun' } }
    /**
     * Find zero or one ResearchRun that matches the filter.
     * @param {ResearchRunFindUniqueArgs} args - Arguments to find a ResearchRun
     * @example
     * // Get one ResearchRun
     * const researchRun = await prisma.researchRun.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResearchRunFindUniqueArgs>(args: SelectSubset<T, ResearchRunFindUniqueArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ResearchRun that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResearchRunFindUniqueOrThrowArgs} args - Arguments to find a ResearchRun
     * @example
     * // Get one ResearchRun
     * const researchRun = await prisma.researchRun.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResearchRunFindUniqueOrThrowArgs>(args: SelectSubset<T, ResearchRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ResearchRun that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunFindFirstArgs} args - Arguments to find a ResearchRun
     * @example
     * // Get one ResearchRun
     * const researchRun = await prisma.researchRun.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResearchRunFindFirstArgs>(args?: SelectSubset<T, ResearchRunFindFirstArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ResearchRun that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunFindFirstOrThrowArgs} args - Arguments to find a ResearchRun
     * @example
     * // Get one ResearchRun
     * const researchRun = await prisma.researchRun.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResearchRunFindFirstOrThrowArgs>(args?: SelectSubset<T, ResearchRunFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ResearchRuns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResearchRuns
     * const researchRuns = await prisma.researchRun.findMany()
     * 
     * // Get first 10 ResearchRuns
     * const researchRuns = await prisma.researchRun.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const researchRunWithIdOnly = await prisma.researchRun.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResearchRunFindManyArgs>(args?: SelectSubset<T, ResearchRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ResearchRun.
     * @param {ResearchRunCreateArgs} args - Arguments to create a ResearchRun.
     * @example
     * // Create one ResearchRun
     * const ResearchRun = await prisma.researchRun.create({
     *   data: {
     *     // ... data to create a ResearchRun
     *   }
     * })
     * 
     */
    create<T extends ResearchRunCreateArgs>(args: SelectSubset<T, ResearchRunCreateArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ResearchRuns.
     * @param {ResearchRunCreateManyArgs} args - Arguments to create many ResearchRuns.
     * @example
     * // Create many ResearchRuns
     * const researchRun = await prisma.researchRun.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResearchRunCreateManyArgs>(args?: SelectSubset<T, ResearchRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResearchRuns and returns the data saved in the database.
     * @param {ResearchRunCreateManyAndReturnArgs} args - Arguments to create many ResearchRuns.
     * @example
     * // Create many ResearchRuns
     * const researchRun = await prisma.researchRun.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResearchRuns and only return the `id`
     * const researchRunWithIdOnly = await prisma.researchRun.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResearchRunCreateManyAndReturnArgs>(args?: SelectSubset<T, ResearchRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ResearchRun.
     * @param {ResearchRunDeleteArgs} args - Arguments to delete one ResearchRun.
     * @example
     * // Delete one ResearchRun
     * const ResearchRun = await prisma.researchRun.delete({
     *   where: {
     *     // ... filter to delete one ResearchRun
     *   }
     * })
     * 
     */
    delete<T extends ResearchRunDeleteArgs>(args: SelectSubset<T, ResearchRunDeleteArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ResearchRun.
     * @param {ResearchRunUpdateArgs} args - Arguments to update one ResearchRun.
     * @example
     * // Update one ResearchRun
     * const researchRun = await prisma.researchRun.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResearchRunUpdateArgs>(args: SelectSubset<T, ResearchRunUpdateArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ResearchRuns.
     * @param {ResearchRunDeleteManyArgs} args - Arguments to filter ResearchRuns to delete.
     * @example
     * // Delete a few ResearchRuns
     * const { count } = await prisma.researchRun.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResearchRunDeleteManyArgs>(args?: SelectSubset<T, ResearchRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResearchRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResearchRuns
     * const researchRun = await prisma.researchRun.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResearchRunUpdateManyArgs>(args: SelectSubset<T, ResearchRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ResearchRun.
     * @param {ResearchRunUpsertArgs} args - Arguments to update or create a ResearchRun.
     * @example
     * // Update or create a ResearchRun
     * const researchRun = await prisma.researchRun.upsert({
     *   create: {
     *     // ... data to create a ResearchRun
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResearchRun we want to update
     *   }
     * })
     */
    upsert<T extends ResearchRunUpsertArgs>(args: SelectSubset<T, ResearchRunUpsertArgs<ExtArgs>>): Prisma__ResearchRunClient<$Result.GetResult<Prisma.$ResearchRunPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ResearchRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunCountArgs} args - Arguments to filter ResearchRuns to count.
     * @example
     * // Count the number of ResearchRuns
     * const count = await prisma.researchRun.count({
     *   where: {
     *     // ... the filter for the ResearchRuns we want to count
     *   }
     * })
    **/
    count<T extends ResearchRunCountArgs>(
      args?: Subset<T, ResearchRunCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResearchRunCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResearchRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResearchRunAggregateArgs>(args: Subset<T, ResearchRunAggregateArgs>): Prisma.PrismaPromise<GetResearchRunAggregateType<T>>

    /**
     * Group by ResearchRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchRunGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResearchRunGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResearchRunGroupByArgs['orderBy'] }
        : { orderBy?: ResearchRunGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResearchRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResearchRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResearchRun model
   */
  readonly fields: ResearchRunFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResearchRun.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResearchRunClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResearchRun model
   */ 
  interface ResearchRunFieldRefs {
    readonly id: FieldRef<"ResearchRun", 'String'>
    readonly region: FieldRef<"ResearchRun", 'String'>
    readonly created_at: FieldRef<"ResearchRun", 'DateTime'>
    readonly keywords_json: FieldRef<"ResearchRun", 'Json'>
    readonly source_counts: FieldRef<"ResearchRun", 'Json'>
    readonly rising_json: FieldRef<"ResearchRun", 'Json'>
    readonly leaders_json: FieldRef<"ResearchRun", 'Json'>
    readonly citations_json: FieldRef<"ResearchRun", 'Json'>
    readonly why_matters: FieldRef<"ResearchRun", 'String'>
    readonly ahead_json: FieldRef<"ResearchRun", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ResearchRun findUnique
   */
  export type ResearchRunFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter, which ResearchRun to fetch.
     */
    where: ResearchRunWhereUniqueInput
  }

  /**
   * ResearchRun findUniqueOrThrow
   */
  export type ResearchRunFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter, which ResearchRun to fetch.
     */
    where: ResearchRunWhereUniqueInput
  }

  /**
   * ResearchRun findFirst
   */
  export type ResearchRunFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter, which ResearchRun to fetch.
     */
    where?: ResearchRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearchRuns to fetch.
     */
    orderBy?: ResearchRunOrderByWithRelationInput | ResearchRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResearchRuns.
     */
    cursor?: ResearchRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearchRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearchRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResearchRuns.
     */
    distinct?: ResearchRunScalarFieldEnum | ResearchRunScalarFieldEnum[]
  }

  /**
   * ResearchRun findFirstOrThrow
   */
  export type ResearchRunFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter, which ResearchRun to fetch.
     */
    where?: ResearchRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearchRuns to fetch.
     */
    orderBy?: ResearchRunOrderByWithRelationInput | ResearchRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResearchRuns.
     */
    cursor?: ResearchRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearchRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearchRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResearchRuns.
     */
    distinct?: ResearchRunScalarFieldEnum | ResearchRunScalarFieldEnum[]
  }

  /**
   * ResearchRun findMany
   */
  export type ResearchRunFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter, which ResearchRuns to fetch.
     */
    where?: ResearchRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResearchRuns to fetch.
     */
    orderBy?: ResearchRunOrderByWithRelationInput | ResearchRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResearchRuns.
     */
    cursor?: ResearchRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResearchRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResearchRuns.
     */
    skip?: number
    distinct?: ResearchRunScalarFieldEnum | ResearchRunScalarFieldEnum[]
  }

  /**
   * ResearchRun create
   */
  export type ResearchRunCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * The data needed to create a ResearchRun.
     */
    data: XOR<ResearchRunCreateInput, ResearchRunUncheckedCreateInput>
  }

  /**
   * ResearchRun createMany
   */
  export type ResearchRunCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResearchRuns.
     */
    data: ResearchRunCreateManyInput | ResearchRunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResearchRun createManyAndReturn
   */
  export type ResearchRunCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ResearchRuns.
     */
    data: ResearchRunCreateManyInput | ResearchRunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResearchRun update
   */
  export type ResearchRunUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * The data needed to update a ResearchRun.
     */
    data: XOR<ResearchRunUpdateInput, ResearchRunUncheckedUpdateInput>
    /**
     * Choose, which ResearchRun to update.
     */
    where: ResearchRunWhereUniqueInput
  }

  /**
   * ResearchRun updateMany
   */
  export type ResearchRunUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResearchRuns.
     */
    data: XOR<ResearchRunUpdateManyMutationInput, ResearchRunUncheckedUpdateManyInput>
    /**
     * Filter which ResearchRuns to update
     */
    where?: ResearchRunWhereInput
  }

  /**
   * ResearchRun upsert
   */
  export type ResearchRunUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * The filter to search for the ResearchRun to update in case it exists.
     */
    where: ResearchRunWhereUniqueInput
    /**
     * In case the ResearchRun found by the `where` argument doesn't exist, create a new ResearchRun with this data.
     */
    create: XOR<ResearchRunCreateInput, ResearchRunUncheckedCreateInput>
    /**
     * In case the ResearchRun was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResearchRunUpdateInput, ResearchRunUncheckedUpdateInput>
  }

  /**
   * ResearchRun delete
   */
  export type ResearchRunDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
    /**
     * Filter which ResearchRun to delete.
     */
    where: ResearchRunWhereUniqueInput
  }

  /**
   * ResearchRun deleteMany
   */
  export type ResearchRunDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResearchRuns to delete
     */
    where?: ResearchRunWhereInput
  }

  /**
   * ResearchRun without action
   */
  export type ResearchRunDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResearchRun
     */
    select?: ResearchRunSelect<ExtArgs> | null
  }


  /**
   * Model Watchlist
   */

  export type AggregateWatchlist = {
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  export type WatchlistMinAggregateOutputType = {
    region: string | null
    updated_at: Date | null
  }

  export type WatchlistMaxAggregateOutputType = {
    region: string | null
    updated_at: Date | null
  }

  export type WatchlistCountAggregateOutputType = {
    region: number
    keywords: number
    updated_at: number
    _all: number
  }


  export type WatchlistMinAggregateInputType = {
    region?: true
    updated_at?: true
  }

  export type WatchlistMaxAggregateInputType = {
    region?: true
    updated_at?: true
  }

  export type WatchlistCountAggregateInputType = {
    region?: true
    keywords?: true
    updated_at?: true
    _all?: true
  }

  export type WatchlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlist to aggregate.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Watchlists
    **/
    _count?: true | WatchlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchlistMaxAggregateInputType
  }

  export type GetWatchlistAggregateType<T extends WatchlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchlist[P]>
      : GetScalarType<T[P], AggregateWatchlist[P]>
  }




  export type WatchlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithAggregationInput | WatchlistOrderByWithAggregationInput[]
    by: WatchlistScalarFieldEnum[] | WatchlistScalarFieldEnum
    having?: WatchlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchlistCountAggregateInputType | true
    _min?: WatchlistMinAggregateInputType
    _max?: WatchlistMaxAggregateInputType
  }

  export type WatchlistGroupByOutputType = {
    region: string
    keywords: JsonValue
    updated_at: Date
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  type GetWatchlistGroupByPayload<T extends WatchlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
            : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
        }
      >
    >


  export type WatchlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    region?: boolean
    keywords?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    region?: boolean
    keywords?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectScalar = {
    region?: boolean
    keywords?: boolean
    updated_at?: boolean
  }


  export type $WatchlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Watchlist"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      region: string
      keywords: Prisma.JsonValue
      updated_at: Date
    }, ExtArgs["result"]["watchlist"]>
    composites: {}
  }

  type WatchlistGetPayload<S extends boolean | null | undefined | WatchlistDefaultArgs> = $Result.GetResult<Prisma.$WatchlistPayload, S>

  type WatchlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WatchlistFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WatchlistCountAggregateInputType | true
    }

  export interface WatchlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Watchlist'], meta: { name: 'Watchlist' } }
    /**
     * Find zero or one Watchlist that matches the filter.
     * @param {WatchlistFindUniqueArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchlistFindUniqueArgs>(args: SelectSubset<T, WatchlistFindUniqueArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Watchlist that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WatchlistFindUniqueOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Watchlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchlistFindFirstArgs>(args?: SelectSubset<T, WatchlistFindFirstArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Watchlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Watchlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Watchlists
     * const watchlists = await prisma.watchlist.findMany()
     * 
     * // Get first 10 Watchlists
     * const watchlists = await prisma.watchlist.findMany({ take: 10 })
     * 
     * // Only select the `region`
     * const watchlistWithRegionOnly = await prisma.watchlist.findMany({ select: { region: true } })
     * 
     */
    findMany<T extends WatchlistFindManyArgs>(args?: SelectSubset<T, WatchlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Watchlist.
     * @param {WatchlistCreateArgs} args - Arguments to create a Watchlist.
     * @example
     * // Create one Watchlist
     * const Watchlist = await prisma.watchlist.create({
     *   data: {
     *     // ... data to create a Watchlist
     *   }
     * })
     * 
     */
    create<T extends WatchlistCreateArgs>(args: SelectSubset<T, WatchlistCreateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Watchlists.
     * @param {WatchlistCreateManyArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchlistCreateManyArgs>(args?: SelectSubset<T, WatchlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Watchlists and returns the data saved in the database.
     * @param {WatchlistCreateManyAndReturnArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Watchlists and only return the `region`
     * const watchlistWithRegionOnly = await prisma.watchlist.createManyAndReturn({ 
     *   select: { region: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchlistCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Watchlist.
     * @param {WatchlistDeleteArgs} args - Arguments to delete one Watchlist.
     * @example
     * // Delete one Watchlist
     * const Watchlist = await prisma.watchlist.delete({
     *   where: {
     *     // ... filter to delete one Watchlist
     *   }
     * })
     * 
     */
    delete<T extends WatchlistDeleteArgs>(args: SelectSubset<T, WatchlistDeleteArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Watchlist.
     * @param {WatchlistUpdateArgs} args - Arguments to update one Watchlist.
     * @example
     * // Update one Watchlist
     * const watchlist = await prisma.watchlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchlistUpdateArgs>(args: SelectSubset<T, WatchlistUpdateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Watchlists.
     * @param {WatchlistDeleteManyArgs} args - Arguments to filter Watchlists to delete.
     * @example
     * // Delete a few Watchlists
     * const { count } = await prisma.watchlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchlistDeleteManyArgs>(args?: SelectSubset<T, WatchlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Watchlists
     * const watchlist = await prisma.watchlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchlistUpdateManyArgs>(args: SelectSubset<T, WatchlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Watchlist.
     * @param {WatchlistUpsertArgs} args - Arguments to update or create a Watchlist.
     * @example
     * // Update or create a Watchlist
     * const watchlist = await prisma.watchlist.upsert({
     *   create: {
     *     // ... data to create a Watchlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Watchlist we want to update
     *   }
     * })
     */
    upsert<T extends WatchlistUpsertArgs>(args: SelectSubset<T, WatchlistUpsertArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistCountArgs} args - Arguments to filter Watchlists to count.
     * @example
     * // Count the number of Watchlists
     * const count = await prisma.watchlist.count({
     *   where: {
     *     // ... the filter for the Watchlists we want to count
     *   }
     * })
    **/
    count<T extends WatchlistCountArgs>(
      args?: Subset<T, WatchlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchlistAggregateArgs>(args: Subset<T, WatchlistAggregateArgs>): Prisma.PrismaPromise<GetWatchlistAggregateType<T>>

    /**
     * Group by Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchlistGroupByArgs['orderBy'] }
        : { orderBy?: WatchlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Watchlist model
   */
  readonly fields: WatchlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Watchlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Watchlist model
   */ 
  interface WatchlistFieldRefs {
    readonly region: FieldRef<"Watchlist", 'String'>
    readonly keywords: FieldRef<"Watchlist", 'Json'>
    readonly updated_at: FieldRef<"Watchlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Watchlist findUnique
   */
  export type WatchlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findUniqueOrThrow
   */
  export type WatchlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findFirst
   */
  export type WatchlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findFirstOrThrow
   */
  export type WatchlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findMany
   */
  export type WatchlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter, which Watchlists to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist create
   */
  export type WatchlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * The data needed to create a Watchlist.
     */
    data: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
  }

  /**
   * Watchlist createMany
   */
  export type WatchlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Watchlist createManyAndReturn
   */
  export type WatchlistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Watchlist update
   */
  export type WatchlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * The data needed to update a Watchlist.
     */
    data: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
    /**
     * Choose, which Watchlist to update.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist updateMany
   */
  export type WatchlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Watchlists.
     */
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyInput>
    /**
     * Filter which Watchlists to update
     */
    where?: WatchlistWhereInput
  }

  /**
   * Watchlist upsert
   */
  export type WatchlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * The filter to search for the Watchlist to update in case it exists.
     */
    where: WatchlistWhereUniqueInput
    /**
     * In case the Watchlist found by the `where` argument doesn't exist, create a new Watchlist with this data.
     */
    create: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
    /**
     * In case the Watchlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
  }

  /**
   * Watchlist delete
   */
  export type WatchlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Filter which Watchlist to delete.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist deleteMany
   */
  export type WatchlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlists to delete
     */
    where?: WatchlistWhereInput
  }

  /**
   * Watchlist without action
   */
  export type WatchlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
  }


  /**
   * Model ThemeWeekly
   */

  export type AggregateThemeWeekly = {
    _count: ThemeWeeklyCountAggregateOutputType | null
    _avg: ThemeWeeklyAvgAggregateOutputType | null
    _sum: ThemeWeeklySumAggregateOutputType | null
    _min: ThemeWeeklyMinAggregateOutputType | null
    _max: ThemeWeeklyMaxAggregateOutputType | null
  }

  export type ThemeWeeklyAvgAggregateOutputType = {
    heat: number | null
    momentum: number | null
    forecast_heat: number | null
    confidence: number | null
  }

  export type ThemeWeeklySumAggregateOutputType = {
    heat: number | null
    momentum: number | null
    forecast_heat: number | null
    confidence: number | null
  }

  export type ThemeWeeklyMinAggregateOutputType = {
    id: string | null
    region: string | null
    week: string | null
    theme: string | null
    heat: number | null
    momentum: number | null
    forecast_heat: number | null
    confidence: number | null
    act_watch_avoid: string | null
  }

  export type ThemeWeeklyMaxAggregateOutputType = {
    id: string | null
    region: string | null
    week: string | null
    theme: string | null
    heat: number | null
    momentum: number | null
    forecast_heat: number | null
    confidence: number | null
    act_watch_avoid: string | null
  }

  export type ThemeWeeklyCountAggregateOutputType = {
    id: number
    region: number
    week: number
    theme: number
    heat: number
    momentum: number
    forecast_heat: number
    confidence: number
    act_watch_avoid: number
    links: number
    _all: number
  }


  export type ThemeWeeklyAvgAggregateInputType = {
    heat?: true
    momentum?: true
    forecast_heat?: true
    confidence?: true
  }

  export type ThemeWeeklySumAggregateInputType = {
    heat?: true
    momentum?: true
    forecast_heat?: true
    confidence?: true
  }

  export type ThemeWeeklyMinAggregateInputType = {
    id?: true
    region?: true
    week?: true
    theme?: true
    heat?: true
    momentum?: true
    forecast_heat?: true
    confidence?: true
    act_watch_avoid?: true
  }

  export type ThemeWeeklyMaxAggregateInputType = {
    id?: true
    region?: true
    week?: true
    theme?: true
    heat?: true
    momentum?: true
    forecast_heat?: true
    confidence?: true
    act_watch_avoid?: true
  }

  export type ThemeWeeklyCountAggregateInputType = {
    id?: true
    region?: true
    week?: true
    theme?: true
    heat?: true
    momentum?: true
    forecast_heat?: true
    confidence?: true
    act_watch_avoid?: true
    links?: true
    _all?: true
  }

  export type ThemeWeeklyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeWeekly to aggregate.
     */
    where?: ThemeWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeWeeklies to fetch.
     */
    orderBy?: ThemeWeeklyOrderByWithRelationInput | ThemeWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ThemeWeeklies
    **/
    _count?: true | ThemeWeeklyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeWeeklyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeWeeklySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeWeeklyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeWeeklyMaxAggregateInputType
  }

  export type GetThemeWeeklyAggregateType<T extends ThemeWeeklyAggregateArgs> = {
        [P in keyof T & keyof AggregateThemeWeekly]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThemeWeekly[P]>
      : GetScalarType<T[P], AggregateThemeWeekly[P]>
  }




  export type ThemeWeeklyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWeeklyWhereInput
    orderBy?: ThemeWeeklyOrderByWithAggregationInput | ThemeWeeklyOrderByWithAggregationInput[]
    by: ThemeWeeklyScalarFieldEnum[] | ThemeWeeklyScalarFieldEnum
    having?: ThemeWeeklyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeWeeklyCountAggregateInputType | true
    _avg?: ThemeWeeklyAvgAggregateInputType
    _sum?: ThemeWeeklySumAggregateInputType
    _min?: ThemeWeeklyMinAggregateInputType
    _max?: ThemeWeeklyMaxAggregateInputType
  }

  export type ThemeWeeklyGroupByOutputType = {
    id: string
    region: string
    week: string
    theme: string
    heat: number
    momentum: number
    forecast_heat: number | null
    confidence: number | null
    act_watch_avoid: string | null
    links: JsonValue | null
    _count: ThemeWeeklyCountAggregateOutputType | null
    _avg: ThemeWeeklyAvgAggregateOutputType | null
    _sum: ThemeWeeklySumAggregateOutputType | null
    _min: ThemeWeeklyMinAggregateOutputType | null
    _max: ThemeWeeklyMaxAggregateOutputType | null
  }

  type GetThemeWeeklyGroupByPayload<T extends ThemeWeeklyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeWeeklyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeWeeklyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeWeeklyGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeWeeklyGroupByOutputType[P]>
        }
      >
    >


  export type ThemeWeeklySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    week?: boolean
    theme?: boolean
    heat?: boolean
    momentum?: boolean
    forecast_heat?: boolean
    confidence?: boolean
    act_watch_avoid?: boolean
    links?: boolean
  }, ExtArgs["result"]["themeWeekly"]>

  export type ThemeWeeklySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    week?: boolean
    theme?: boolean
    heat?: boolean
    momentum?: boolean
    forecast_heat?: boolean
    confidence?: boolean
    act_watch_avoid?: boolean
    links?: boolean
  }, ExtArgs["result"]["themeWeekly"]>

  export type ThemeWeeklySelectScalar = {
    id?: boolean
    region?: boolean
    week?: boolean
    theme?: boolean
    heat?: boolean
    momentum?: boolean
    forecast_heat?: boolean
    confidence?: boolean
    act_watch_avoid?: boolean
    links?: boolean
  }


  export type $ThemeWeeklyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ThemeWeekly"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      region: string
      week: string
      theme: string
      heat: number
      momentum: number
      forecast_heat: number | null
      confidence: number | null
      act_watch_avoid: string | null
      links: Prisma.JsonValue | null
    }, ExtArgs["result"]["themeWeekly"]>
    composites: {}
  }

  type ThemeWeeklyGetPayload<S extends boolean | null | undefined | ThemeWeeklyDefaultArgs> = $Result.GetResult<Prisma.$ThemeWeeklyPayload, S>

  type ThemeWeeklyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThemeWeeklyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThemeWeeklyCountAggregateInputType | true
    }

  export interface ThemeWeeklyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ThemeWeekly'], meta: { name: 'ThemeWeekly' } }
    /**
     * Find zero or one ThemeWeekly that matches the filter.
     * @param {ThemeWeeklyFindUniqueArgs} args - Arguments to find a ThemeWeekly
     * @example
     * // Get one ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeWeeklyFindUniqueArgs>(args: SelectSubset<T, ThemeWeeklyFindUniqueArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ThemeWeekly that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ThemeWeeklyFindUniqueOrThrowArgs} args - Arguments to find a ThemeWeekly
     * @example
     * // Get one ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeWeeklyFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeWeeklyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ThemeWeekly that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyFindFirstArgs} args - Arguments to find a ThemeWeekly
     * @example
     * // Get one ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeWeeklyFindFirstArgs>(args?: SelectSubset<T, ThemeWeeklyFindFirstArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ThemeWeekly that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyFindFirstOrThrowArgs} args - Arguments to find a ThemeWeekly
     * @example
     * // Get one ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeWeeklyFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeWeeklyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ThemeWeeklies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ThemeWeeklies
     * const themeWeeklies = await prisma.themeWeekly.findMany()
     * 
     * // Get first 10 ThemeWeeklies
     * const themeWeeklies = await prisma.themeWeekly.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWeeklyWithIdOnly = await prisma.themeWeekly.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeWeeklyFindManyArgs>(args?: SelectSubset<T, ThemeWeeklyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ThemeWeekly.
     * @param {ThemeWeeklyCreateArgs} args - Arguments to create a ThemeWeekly.
     * @example
     * // Create one ThemeWeekly
     * const ThemeWeekly = await prisma.themeWeekly.create({
     *   data: {
     *     // ... data to create a ThemeWeekly
     *   }
     * })
     * 
     */
    create<T extends ThemeWeeklyCreateArgs>(args: SelectSubset<T, ThemeWeeklyCreateArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ThemeWeeklies.
     * @param {ThemeWeeklyCreateManyArgs} args - Arguments to create many ThemeWeeklies.
     * @example
     * // Create many ThemeWeeklies
     * const themeWeekly = await prisma.themeWeekly.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeWeeklyCreateManyArgs>(args?: SelectSubset<T, ThemeWeeklyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ThemeWeeklies and returns the data saved in the database.
     * @param {ThemeWeeklyCreateManyAndReturnArgs} args - Arguments to create many ThemeWeeklies.
     * @example
     * // Create many ThemeWeeklies
     * const themeWeekly = await prisma.themeWeekly.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ThemeWeeklies and only return the `id`
     * const themeWeeklyWithIdOnly = await prisma.themeWeekly.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeWeeklyCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeWeeklyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ThemeWeekly.
     * @param {ThemeWeeklyDeleteArgs} args - Arguments to delete one ThemeWeekly.
     * @example
     * // Delete one ThemeWeekly
     * const ThemeWeekly = await prisma.themeWeekly.delete({
     *   where: {
     *     // ... filter to delete one ThemeWeekly
     *   }
     * })
     * 
     */
    delete<T extends ThemeWeeklyDeleteArgs>(args: SelectSubset<T, ThemeWeeklyDeleteArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ThemeWeekly.
     * @param {ThemeWeeklyUpdateArgs} args - Arguments to update one ThemeWeekly.
     * @example
     * // Update one ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeWeeklyUpdateArgs>(args: SelectSubset<T, ThemeWeeklyUpdateArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ThemeWeeklies.
     * @param {ThemeWeeklyDeleteManyArgs} args - Arguments to filter ThemeWeeklies to delete.
     * @example
     * // Delete a few ThemeWeeklies
     * const { count } = await prisma.themeWeekly.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeWeeklyDeleteManyArgs>(args?: SelectSubset<T, ThemeWeeklyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ThemeWeeklies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ThemeWeeklies
     * const themeWeekly = await prisma.themeWeekly.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeWeeklyUpdateManyArgs>(args: SelectSubset<T, ThemeWeeklyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ThemeWeekly.
     * @param {ThemeWeeklyUpsertArgs} args - Arguments to update or create a ThemeWeekly.
     * @example
     * // Update or create a ThemeWeekly
     * const themeWeekly = await prisma.themeWeekly.upsert({
     *   create: {
     *     // ... data to create a ThemeWeekly
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ThemeWeekly we want to update
     *   }
     * })
     */
    upsert<T extends ThemeWeeklyUpsertArgs>(args: SelectSubset<T, ThemeWeeklyUpsertArgs<ExtArgs>>): Prisma__ThemeWeeklyClient<$Result.GetResult<Prisma.$ThemeWeeklyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ThemeWeeklies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyCountArgs} args - Arguments to filter ThemeWeeklies to count.
     * @example
     * // Count the number of ThemeWeeklies
     * const count = await prisma.themeWeekly.count({
     *   where: {
     *     // ... the filter for the ThemeWeeklies we want to count
     *   }
     * })
    **/
    count<T extends ThemeWeeklyCountArgs>(
      args?: Subset<T, ThemeWeeklyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeWeeklyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ThemeWeekly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeWeeklyAggregateArgs>(args: Subset<T, ThemeWeeklyAggregateArgs>): Prisma.PrismaPromise<GetThemeWeeklyAggregateType<T>>

    /**
     * Group by ThemeWeekly.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeWeeklyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeWeeklyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeWeeklyGroupByArgs['orderBy'] }
        : { orderBy?: ThemeWeeklyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeWeeklyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeWeeklyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ThemeWeekly model
   */
  readonly fields: ThemeWeeklyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ThemeWeekly.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeWeeklyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ThemeWeekly model
   */ 
  interface ThemeWeeklyFieldRefs {
    readonly id: FieldRef<"ThemeWeekly", 'String'>
    readonly region: FieldRef<"ThemeWeekly", 'String'>
    readonly week: FieldRef<"ThemeWeekly", 'String'>
    readonly theme: FieldRef<"ThemeWeekly", 'String'>
    readonly heat: FieldRef<"ThemeWeekly", 'Float'>
    readonly momentum: FieldRef<"ThemeWeekly", 'Float'>
    readonly forecast_heat: FieldRef<"ThemeWeekly", 'Float'>
    readonly confidence: FieldRef<"ThemeWeekly", 'Float'>
    readonly act_watch_avoid: FieldRef<"ThemeWeekly", 'String'>
    readonly links: FieldRef<"ThemeWeekly", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ThemeWeekly findUnique
   */
  export type ThemeWeeklyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter, which ThemeWeekly to fetch.
     */
    where: ThemeWeeklyWhereUniqueInput
  }

  /**
   * ThemeWeekly findUniqueOrThrow
   */
  export type ThemeWeeklyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter, which ThemeWeekly to fetch.
     */
    where: ThemeWeeklyWhereUniqueInput
  }

  /**
   * ThemeWeekly findFirst
   */
  export type ThemeWeeklyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter, which ThemeWeekly to fetch.
     */
    where?: ThemeWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeWeeklies to fetch.
     */
    orderBy?: ThemeWeeklyOrderByWithRelationInput | ThemeWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeWeeklies.
     */
    cursor?: ThemeWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeWeeklies.
     */
    distinct?: ThemeWeeklyScalarFieldEnum | ThemeWeeklyScalarFieldEnum[]
  }

  /**
   * ThemeWeekly findFirstOrThrow
   */
  export type ThemeWeeklyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter, which ThemeWeekly to fetch.
     */
    where?: ThemeWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeWeeklies to fetch.
     */
    orderBy?: ThemeWeeklyOrderByWithRelationInput | ThemeWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ThemeWeeklies.
     */
    cursor?: ThemeWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeWeeklies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ThemeWeeklies.
     */
    distinct?: ThemeWeeklyScalarFieldEnum | ThemeWeeklyScalarFieldEnum[]
  }

  /**
   * ThemeWeekly findMany
   */
  export type ThemeWeeklyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter, which ThemeWeeklies to fetch.
     */
    where?: ThemeWeeklyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ThemeWeeklies to fetch.
     */
    orderBy?: ThemeWeeklyOrderByWithRelationInput | ThemeWeeklyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ThemeWeeklies.
     */
    cursor?: ThemeWeeklyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ThemeWeeklies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ThemeWeeklies.
     */
    skip?: number
    distinct?: ThemeWeeklyScalarFieldEnum | ThemeWeeklyScalarFieldEnum[]
  }

  /**
   * ThemeWeekly create
   */
  export type ThemeWeeklyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * The data needed to create a ThemeWeekly.
     */
    data: XOR<ThemeWeeklyCreateInput, ThemeWeeklyUncheckedCreateInput>
  }

  /**
   * ThemeWeekly createMany
   */
  export type ThemeWeeklyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ThemeWeeklies.
     */
    data: ThemeWeeklyCreateManyInput | ThemeWeeklyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThemeWeekly createManyAndReturn
   */
  export type ThemeWeeklyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ThemeWeeklies.
     */
    data: ThemeWeeklyCreateManyInput | ThemeWeeklyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ThemeWeekly update
   */
  export type ThemeWeeklyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * The data needed to update a ThemeWeekly.
     */
    data: XOR<ThemeWeeklyUpdateInput, ThemeWeeklyUncheckedUpdateInput>
    /**
     * Choose, which ThemeWeekly to update.
     */
    where: ThemeWeeklyWhereUniqueInput
  }

  /**
   * ThemeWeekly updateMany
   */
  export type ThemeWeeklyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ThemeWeeklies.
     */
    data: XOR<ThemeWeeklyUpdateManyMutationInput, ThemeWeeklyUncheckedUpdateManyInput>
    /**
     * Filter which ThemeWeeklies to update
     */
    where?: ThemeWeeklyWhereInput
  }

  /**
   * ThemeWeekly upsert
   */
  export type ThemeWeeklyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * The filter to search for the ThemeWeekly to update in case it exists.
     */
    where: ThemeWeeklyWhereUniqueInput
    /**
     * In case the ThemeWeekly found by the `where` argument doesn't exist, create a new ThemeWeekly with this data.
     */
    create: XOR<ThemeWeeklyCreateInput, ThemeWeeklyUncheckedCreateInput>
    /**
     * In case the ThemeWeekly was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeWeeklyUpdateInput, ThemeWeeklyUncheckedUpdateInput>
  }

  /**
   * ThemeWeekly delete
   */
  export type ThemeWeeklyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
    /**
     * Filter which ThemeWeekly to delete.
     */
    where: ThemeWeeklyWhereUniqueInput
  }

  /**
   * ThemeWeekly deleteMany
   */
  export type ThemeWeeklyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ThemeWeeklies to delete
     */
    where?: ThemeWeeklyWhereInput
  }

  /**
   * ThemeWeekly without action
   */
  export type ThemeWeeklyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeWeekly
     */
    select?: ThemeWeeklySelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ResearchRunScalarFieldEnum: {
    id: 'id',
    region: 'region',
    created_at: 'created_at',
    keywords_json: 'keywords_json',
    source_counts: 'source_counts',
    rising_json: 'rising_json',
    leaders_json: 'leaders_json',
    citations_json: 'citations_json',
    why_matters: 'why_matters',
    ahead_json: 'ahead_json'
  };

  export type ResearchRunScalarFieldEnum = (typeof ResearchRunScalarFieldEnum)[keyof typeof ResearchRunScalarFieldEnum]


  export const WatchlistScalarFieldEnum: {
    region: 'region',
    keywords: 'keywords',
    updated_at: 'updated_at'
  };

  export type WatchlistScalarFieldEnum = (typeof WatchlistScalarFieldEnum)[keyof typeof WatchlistScalarFieldEnum]


  export const ThemeWeeklyScalarFieldEnum: {
    id: 'id',
    region: 'region',
    week: 'week',
    theme: 'theme',
    heat: 'heat',
    momentum: 'momentum',
    forecast_heat: 'forecast_heat',
    confidence: 'confidence',
    act_watch_avoid: 'act_watch_avoid',
    links: 'links'
  };

  export type ThemeWeeklyScalarFieldEnum = (typeof ThemeWeeklyScalarFieldEnum)[keyof typeof ThemeWeeklyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ResearchRunWhereInput = {
    AND?: ResearchRunWhereInput | ResearchRunWhereInput[]
    OR?: ResearchRunWhereInput[]
    NOT?: ResearchRunWhereInput | ResearchRunWhereInput[]
    id?: StringFilter<"ResearchRun"> | string
    region?: StringFilter<"ResearchRun"> | string
    created_at?: DateTimeFilter<"ResearchRun"> | Date | string
    keywords_json?: JsonFilter<"ResearchRun">
    source_counts?: JsonNullableFilter<"ResearchRun">
    rising_json?: JsonNullableFilter<"ResearchRun">
    leaders_json?: JsonNullableFilter<"ResearchRun">
    citations_json?: JsonNullableFilter<"ResearchRun">
    why_matters?: StringNullableFilter<"ResearchRun"> | string | null
    ahead_json?: JsonNullableFilter<"ResearchRun">
  }

  export type ResearchRunOrderByWithRelationInput = {
    id?: SortOrder
    region?: SortOrder
    created_at?: SortOrder
    keywords_json?: SortOrder
    source_counts?: SortOrderInput | SortOrder
    rising_json?: SortOrderInput | SortOrder
    leaders_json?: SortOrderInput | SortOrder
    citations_json?: SortOrderInput | SortOrder
    why_matters?: SortOrderInput | SortOrder
    ahead_json?: SortOrderInput | SortOrder
  }

  export type ResearchRunWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResearchRunWhereInput | ResearchRunWhereInput[]
    OR?: ResearchRunWhereInput[]
    NOT?: ResearchRunWhereInput | ResearchRunWhereInput[]
    region?: StringFilter<"ResearchRun"> | string
    created_at?: DateTimeFilter<"ResearchRun"> | Date | string
    keywords_json?: JsonFilter<"ResearchRun">
    source_counts?: JsonNullableFilter<"ResearchRun">
    rising_json?: JsonNullableFilter<"ResearchRun">
    leaders_json?: JsonNullableFilter<"ResearchRun">
    citations_json?: JsonNullableFilter<"ResearchRun">
    why_matters?: StringNullableFilter<"ResearchRun"> | string | null
    ahead_json?: JsonNullableFilter<"ResearchRun">
  }, "id">

  export type ResearchRunOrderByWithAggregationInput = {
    id?: SortOrder
    region?: SortOrder
    created_at?: SortOrder
    keywords_json?: SortOrder
    source_counts?: SortOrderInput | SortOrder
    rising_json?: SortOrderInput | SortOrder
    leaders_json?: SortOrderInput | SortOrder
    citations_json?: SortOrderInput | SortOrder
    why_matters?: SortOrderInput | SortOrder
    ahead_json?: SortOrderInput | SortOrder
    _count?: ResearchRunCountOrderByAggregateInput
    _max?: ResearchRunMaxOrderByAggregateInput
    _min?: ResearchRunMinOrderByAggregateInput
  }

  export type ResearchRunScalarWhereWithAggregatesInput = {
    AND?: ResearchRunScalarWhereWithAggregatesInput | ResearchRunScalarWhereWithAggregatesInput[]
    OR?: ResearchRunScalarWhereWithAggregatesInput[]
    NOT?: ResearchRunScalarWhereWithAggregatesInput | ResearchRunScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResearchRun"> | string
    region?: StringWithAggregatesFilter<"ResearchRun"> | string
    created_at?: DateTimeWithAggregatesFilter<"ResearchRun"> | Date | string
    keywords_json?: JsonWithAggregatesFilter<"ResearchRun">
    source_counts?: JsonNullableWithAggregatesFilter<"ResearchRun">
    rising_json?: JsonNullableWithAggregatesFilter<"ResearchRun">
    leaders_json?: JsonNullableWithAggregatesFilter<"ResearchRun">
    citations_json?: JsonNullableWithAggregatesFilter<"ResearchRun">
    why_matters?: StringNullableWithAggregatesFilter<"ResearchRun"> | string | null
    ahead_json?: JsonNullableWithAggregatesFilter<"ResearchRun">
  }

  export type WatchlistWhereInput = {
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    region?: StringFilter<"Watchlist"> | string
    keywords?: JsonFilter<"Watchlist">
    updated_at?: DateTimeFilter<"Watchlist"> | Date | string
  }

  export type WatchlistOrderByWithRelationInput = {
    region?: SortOrder
    keywords?: SortOrder
    updated_at?: SortOrder
  }

  export type WatchlistWhereUniqueInput = Prisma.AtLeast<{
    region?: string
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    keywords?: JsonFilter<"Watchlist">
    updated_at?: DateTimeFilter<"Watchlist"> | Date | string
  }, "region">

  export type WatchlistOrderByWithAggregationInput = {
    region?: SortOrder
    keywords?: SortOrder
    updated_at?: SortOrder
    _count?: WatchlistCountOrderByAggregateInput
    _max?: WatchlistMaxOrderByAggregateInput
    _min?: WatchlistMinOrderByAggregateInput
  }

  export type WatchlistScalarWhereWithAggregatesInput = {
    AND?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    OR?: WatchlistScalarWhereWithAggregatesInput[]
    NOT?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    region?: StringWithAggregatesFilter<"Watchlist"> | string
    keywords?: JsonWithAggregatesFilter<"Watchlist">
    updated_at?: DateTimeWithAggregatesFilter<"Watchlist"> | Date | string
  }

  export type ThemeWeeklyWhereInput = {
    AND?: ThemeWeeklyWhereInput | ThemeWeeklyWhereInput[]
    OR?: ThemeWeeklyWhereInput[]
    NOT?: ThemeWeeklyWhereInput | ThemeWeeklyWhereInput[]
    id?: StringFilter<"ThemeWeekly"> | string
    region?: StringFilter<"ThemeWeekly"> | string
    week?: StringFilter<"ThemeWeekly"> | string
    theme?: StringFilter<"ThemeWeekly"> | string
    heat?: FloatFilter<"ThemeWeekly"> | number
    momentum?: FloatFilter<"ThemeWeekly"> | number
    forecast_heat?: FloatNullableFilter<"ThemeWeekly"> | number | null
    confidence?: FloatNullableFilter<"ThemeWeekly"> | number | null
    act_watch_avoid?: StringNullableFilter<"ThemeWeekly"> | string | null
    links?: JsonNullableFilter<"ThemeWeekly">
  }

  export type ThemeWeeklyOrderByWithRelationInput = {
    id?: SortOrder
    region?: SortOrder
    week?: SortOrder
    theme?: SortOrder
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    act_watch_avoid?: SortOrderInput | SortOrder
    links?: SortOrderInput | SortOrder
  }

  export type ThemeWeeklyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThemeWeeklyWhereInput | ThemeWeeklyWhereInput[]
    OR?: ThemeWeeklyWhereInput[]
    NOT?: ThemeWeeklyWhereInput | ThemeWeeklyWhereInput[]
    region?: StringFilter<"ThemeWeekly"> | string
    week?: StringFilter<"ThemeWeekly"> | string
    theme?: StringFilter<"ThemeWeekly"> | string
    heat?: FloatFilter<"ThemeWeekly"> | number
    momentum?: FloatFilter<"ThemeWeekly"> | number
    forecast_heat?: FloatNullableFilter<"ThemeWeekly"> | number | null
    confidence?: FloatNullableFilter<"ThemeWeekly"> | number | null
    act_watch_avoid?: StringNullableFilter<"ThemeWeekly"> | string | null
    links?: JsonNullableFilter<"ThemeWeekly">
  }, "id">

  export type ThemeWeeklyOrderByWithAggregationInput = {
    id?: SortOrder
    region?: SortOrder
    week?: SortOrder
    theme?: SortOrder
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    act_watch_avoid?: SortOrderInput | SortOrder
    links?: SortOrderInput | SortOrder
    _count?: ThemeWeeklyCountOrderByAggregateInput
    _avg?: ThemeWeeklyAvgOrderByAggregateInput
    _max?: ThemeWeeklyMaxOrderByAggregateInput
    _min?: ThemeWeeklyMinOrderByAggregateInput
    _sum?: ThemeWeeklySumOrderByAggregateInput
  }

  export type ThemeWeeklyScalarWhereWithAggregatesInput = {
    AND?: ThemeWeeklyScalarWhereWithAggregatesInput | ThemeWeeklyScalarWhereWithAggregatesInput[]
    OR?: ThemeWeeklyScalarWhereWithAggregatesInput[]
    NOT?: ThemeWeeklyScalarWhereWithAggregatesInput | ThemeWeeklyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ThemeWeekly"> | string
    region?: StringWithAggregatesFilter<"ThemeWeekly"> | string
    week?: StringWithAggregatesFilter<"ThemeWeekly"> | string
    theme?: StringWithAggregatesFilter<"ThemeWeekly"> | string
    heat?: FloatWithAggregatesFilter<"ThemeWeekly"> | number
    momentum?: FloatWithAggregatesFilter<"ThemeWeekly"> | number
    forecast_heat?: FloatNullableWithAggregatesFilter<"ThemeWeekly"> | number | null
    confidence?: FloatNullableWithAggregatesFilter<"ThemeWeekly"> | number | null
    act_watch_avoid?: StringNullableWithAggregatesFilter<"ThemeWeekly"> | string | null
    links?: JsonNullableWithAggregatesFilter<"ThemeWeekly">
  }

  export type ResearchRunCreateInput = {
    id?: string
    region: string
    created_at?: Date | string
    keywords_json: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunUncheckedCreateInput = {
    id?: string
    region: string
    created_at?: Date | string
    keywords_json: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    keywords_json?: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: NullableStringFieldUpdateOperationsInput | string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    keywords_json?: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: NullableStringFieldUpdateOperationsInput | string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunCreateManyInput = {
    id?: string
    region: string
    created_at?: Date | string
    keywords_json: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    keywords_json?: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: NullableStringFieldUpdateOperationsInput | string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ResearchRunUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    keywords_json?: JsonNullValueInput | InputJsonValue
    source_counts?: NullableJsonNullValueInput | InputJsonValue
    rising_json?: NullableJsonNullValueInput | InputJsonValue
    leaders_json?: NullableJsonNullValueInput | InputJsonValue
    citations_json?: NullableJsonNullValueInput | InputJsonValue
    why_matters?: NullableStringFieldUpdateOperationsInput | string | null
    ahead_json?: NullableJsonNullValueInput | InputJsonValue
  }

  export type WatchlistCreateInput = {
    region: string
    keywords: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
  }

  export type WatchlistUncheckedCreateInput = {
    region: string
    keywords: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
  }

  export type WatchlistUpdateInput = {
    region?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUncheckedUpdateInput = {
    region?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistCreateManyInput = {
    region: string
    keywords: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
  }

  export type WatchlistUpdateManyMutationInput = {
    region?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUncheckedUpdateManyInput = {
    region?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThemeWeeklyCreateInput = {
    id?: string
    region: string
    week: string
    theme: string
    heat: number
    momentum: number
    forecast_heat?: number | null
    confidence?: number | null
    act_watch_avoid?: string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyUncheckedCreateInput = {
    id?: string
    region: string
    week: string
    theme: string
    heat: number
    momentum: number
    forecast_heat?: number | null
    confidence?: number | null
    act_watch_avoid?: string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    week?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    heat?: FloatFieldUpdateOperationsInput | number
    momentum?: FloatFieldUpdateOperationsInput | number
    forecast_heat?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    act_watch_avoid?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    week?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    heat?: FloatFieldUpdateOperationsInput | number
    momentum?: FloatFieldUpdateOperationsInput | number
    forecast_heat?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    act_watch_avoid?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyCreateManyInput = {
    id?: string
    region: string
    week: string
    theme: string
    heat: number
    momentum: number
    forecast_heat?: number | null
    confidence?: number | null
    act_watch_avoid?: string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    week?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    heat?: FloatFieldUpdateOperationsInput | number
    momentum?: FloatFieldUpdateOperationsInput | number
    forecast_heat?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    act_watch_avoid?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ThemeWeeklyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    week?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    heat?: FloatFieldUpdateOperationsInput | number
    momentum?: FloatFieldUpdateOperationsInput | number
    forecast_heat?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    act_watch_avoid?: NullableStringFieldUpdateOperationsInput | string | null
    links?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ResearchRunCountOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    created_at?: SortOrder
    keywords_json?: SortOrder
    source_counts?: SortOrder
    rising_json?: SortOrder
    leaders_json?: SortOrder
    citations_json?: SortOrder
    why_matters?: SortOrder
    ahead_json?: SortOrder
  }

  export type ResearchRunMaxOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    created_at?: SortOrder
    why_matters?: SortOrder
  }

  export type ResearchRunMinOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    created_at?: SortOrder
    why_matters?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type WatchlistCountOrderByAggregateInput = {
    region?: SortOrder
    keywords?: SortOrder
    updated_at?: SortOrder
  }

  export type WatchlistMaxOrderByAggregateInput = {
    region?: SortOrder
    updated_at?: SortOrder
  }

  export type WatchlistMinOrderByAggregateInput = {
    region?: SortOrder
    updated_at?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ThemeWeeklyCountOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    week?: SortOrder
    theme?: SortOrder
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrder
    confidence?: SortOrder
    act_watch_avoid?: SortOrder
    links?: SortOrder
  }

  export type ThemeWeeklyAvgOrderByAggregateInput = {
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrder
    confidence?: SortOrder
  }

  export type ThemeWeeklyMaxOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    week?: SortOrder
    theme?: SortOrder
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrder
    confidence?: SortOrder
    act_watch_avoid?: SortOrder
  }

  export type ThemeWeeklyMinOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    week?: SortOrder
    theme?: SortOrder
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrder
    confidence?: SortOrder
    act_watch_avoid?: SortOrder
  }

  export type ThemeWeeklySumOrderByAggregateInput = {
    heat?: SortOrder
    momentum?: SortOrder
    forecast_heat?: SortOrder
    confidence?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ResearchRunDefaultArgs instead
     */
    export type ResearchRunArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearchRunDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WatchlistDefaultArgs instead
     */
    export type WatchlistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WatchlistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThemeWeeklyDefaultArgs instead
     */
    export type ThemeWeeklyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThemeWeeklyDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}